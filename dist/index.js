var e=require("@microsoft/signalr"),s=require("uuid");function t(e){if(e&&e.__esModule)return e;var s=Object.create(null);return e&&Object.keys(e).forEach(function(t){if("default"!==t){var r=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(s,t,r.get?r:{enumerable:!0,get:function(){return e[t]}})}}),s.default=e,s}var r,i,o=/*#__PURE__*/t(e);exports.MessageType=void 0,(r=exports.MessageType||(exports.MessageType={})).Command="Command",r.CommandResponse="CommandResponse",r.Query="Query",r.QueryResponse="QueryResponse",r.Event="Event",r.Error="Error",exports.MessageDirection=void 0,(i=exports.MessageDirection||(exports.MessageDirection={})).ToClient="ToClient",i.ToServer="ToServer";class n{constructor(e,t,r,i,o=s.v4(),n=new Date(Date.now()).toJSON(),a=exports.MessageDirection.ToServer,c){this.module=void 0,this.name=void 0,this.type=void 0,this.isError=void 0,this.trackId=void 0,this.created=void 0,this.payload=void 0,this.schema=void 0,this.direction=void 0,this.module=c,this.name=e,this.type=t,this.trackId=o,this.created=n,this.payload=r,this.schema=i,this.direction=a,this.isError=t===exports.MessageType.Error}static create(e){return new n(e.name,e.type,e.payload,e.schema,e.trackId,e.created,e.direction,e.module)}static fromDto(e,s=exports.MessageDirection.ToClient){return new n(e.name,e.type,e.payload,e.schema,e.trackId,e.created,s,e.module)}}class a{constructor(e){this.wsUri=void 0,this.connected=!1,this.connection=void 0,this.debugLogger=window?.console.log||(()=>{}),this.debugLogging={messageReceived:!1,sendingMessage:!1,messageReceivedFilter:void 0,sendingMessageFilter:void 0},this.subscriptionTrackIdList={},this.subscriptionEventList={},this.subscriptionQuery=[],this.history=[],this.bridgeErrors=[],this.wsUri=e}onMessage(e){let s;try{s="string"==typeof e?JSON.parse(e):e}catch(s){return this.onError(s),void console.log("Incorrect message received: "+e)}try{const e=n.fromDto(s);if(this.debugLogging.messageReceived){let s=!0;this.debugLogging.messageReceivedFilter&&(s=!!e.name.match(this.debugLogging.messageReceivedFilter)),s&&this.debugLogger("Bridge (messageReceived): ",e)}this.handleIncomingMessage(e)}catch(e){console.log("Error in response handle for message: "+e)}}sendMessage(e,s,t){e.direction=exports.MessageDirection.ToServer,(s||t)&&(this.subscriptionTrackIdList[e.trackId]={onSuccess:s,onError:t}),this.internalSendMessage(e)}internalSendMessage(e){if(this.history.push(e),this.debugLogging.sendingMessage){let s=!0;this.debugLogging.sendingMessageFilter&&(s=!!e.name.match(this.debugLogging.sendingMessageFilter)),s&&this.debugLogger("Bridge (sendingMessage): ",e)}this.sendNetworkMessage(e)}subscribeEvent({name:e,onEvent:s}){return this.subscriptionEventList[e]||(this.subscriptionEventList[e]=[]),this.subscriptionEventList[e].push(s),()=>{const t=this.subscriptionEventList[e].findIndex(e=>e===s);this.subscriptionEventList[e].splice(t,1)}}createCommandMessage(e,s,t=exports.MessageDirection.ToServer,r){return n.create({name:e,type:exports.MessageType.Command,payload:s,direction:t,module:r})}createQueryMessage(e,s,t=exports.MessageDirection.ToServer,r){return n.create({name:e,type:exports.MessageType.Query,payload:s,direction:t,module:r})}createEventMessage(e,s,t=exports.MessageDirection.ToServer,r){return n.create({name:e,type:exports.MessageType.Event,payload:s,direction:t,module:r})}sendCommand({name:e,payload:s,onSuccess:t,onError:r,module:i}){const o=this.createCommandMessage(e,s,void 0,i);return this.sendMessage(o,t,r),o}sendQuery({name:e,payload:s,onSuccess:t,onError:r,module:i}){const o=this.createQueryMessage(e,s,void 0,i);return this.sendMessage(o,t,r),o}sendEvent({name:e,payload:s,module:t}){const r=this.createEventMessage(e,s,void 0,t);return this.sendMessage(r),r}subscribeQuery(e){return this.sendQuery({name:e.name,payload:e.query,onSuccess:e.onUpdate,onError:e.onError,module:e.module}),this.subscriptionQuery.push(e),()=>{const s=this.subscriptionQuery.findIndex(s=>s===e);s>0&&this.subscriptionQuery.splice(s,1)}}onError(e){this.bridgeErrors.push(e)}handleIncomingMessage(e){this.history.push(e),this.subscriptionTrackIdList[e.trackId]&&(e.type===exports.MessageType.Error?this.subscriptionTrackIdList[e.trackId].onError?.(e.payload,e):this.subscriptionTrackIdList[e.trackId].onSuccess?.(e.payload,e),delete this.subscriptionTrackIdList[e.trackId]),e.type===exports.MessageType.Event&&this.receiveEventMessage(e)}receiveEventMessage(e){this.subscriptionEventList[e.name]&&this.subscriptionEventList[e.name].forEach(s=>s(e.payload,e)),this.subscriptionQuery.filter(s=>s.triggers?.some(s=>s===e.name)??!1).forEach(e=>{const s=this.createQueryMessage(e.name,e.query);this.sendMessage(s,e.onUpdate,e.onError)})}}exports.Message=n,exports.MessageBridgeService=class extends a{connect(e={}){return this.connection=(new o.HubConnectionBuilder).withUrl(this.wsUri,e).withAutomaticReconnect().build(),this.connection.on("ReceiveMessage",e=>{this.onMessage(e)}),this.connection.start().then(()=>{this.connected=!0}).catch(e=>{this.onError(e)})}sendNetworkMessage(e){const s=JSON.stringify(e);this.connection?.invoke("SendMessage",s).catch(e=>(this.onError(e),console.error(e.toString())))}},exports.MessageBridgeServiceBase=a,exports.WebsocketMessageBridgeService=class extends a{constructor(...e){super(...e),this.socket=void 0,this.connectedCallback=void 0}connect(){return this.socket=new WebSocket(this.wsUri),this.socket.addEventListener("message",e=>{this.onMessage(e.data)}),new Promise((e,s)=>{this.socket?.addEventListener("open",s=>{this.connected=!0,e()})})}sendNetworkMessage(e){const s=JSON.stringify(e);this.socket?.send(s)}};
//# sourceMappingURL=index.js.map
