{"version":3,"file":"index.modern.mjs","sources":["../src/MessageBridgeInterfaces.ts","../src/Message.ts","../src/MessageBridgeServiceBase.ts","../src/SignalRMessageBridgeService.ts","../src/WebsocketMessageBridgeService.ts"],"sourcesContent":["import { Message } from \"./Message\"\n\nexport enum MessageType {\n  Command = \"Command\",\n  CommandResponse = \"CommandResponse\", // null or created id (number)\n  Query = \"Query\",\n  QueryResponse = \"QueryResponse\",\n  Event = \"Event\",\n  Error = \"Error\",\n}\n\nexport type SubscribeResponse<TMessageType> = (\n  payload: TMessageType,\n  bridgeMessage: Message<TMessageType>,\n) => void\n\nexport type SubscribeResponseWithCatch<TMessageType, TErrorMessageType = any> = {\n  onSuccess?: SubscribeResponse<TMessageType>\n  onError?: SubscribeResponse<TErrorMessageType>\n}\n\nexport interface IMessageServiceQuerySubscription<TQuery, TResponse> {\n  module?: string\n  name: string\n  query: TQuery\n  triggers: string[]\n  onUpdate: SubscribeResponse<TResponse>\n  onError?: SubscribeResponse<any>\n}\n\nexport enum MessageDirection {\n  ToClient = \"ToClient\",\n  ToServer = \"ToServer\",\n}\n","import { v4 as uuidv4 } from \"uuid\"\nimport { MessageDirection, MessageType } from \"./MessageBridgeInterfaces\"\n\nexport class Message<TPayload = any, TResponse = any, TSchema = any> {\n  public module?: string\n  public name: string\n  public type: MessageType\n  public isError: boolean\n  public trackId: string\n  public created: string\n  public payload?: TPayload\n  public schema?: TSchema\n  public direction: MessageDirection\n  constructor(\n    name: string,\n    type: MessageType,\n    payload?: TPayload,\n    schema?: TSchema,\n    trackId = uuidv4(),\n    created = new Date(Date.now()).toJSON(),\n    direction = MessageDirection.ToServer,\n    module?: string,\n  ) {\n    this.module = module\n    this.name = name\n    this.type = type\n    this.trackId = trackId\n    this.created = created\n    this.payload = payload\n    this.schema = schema\n    this.direction = direction\n    this.isError = type === MessageType.Error\n  }\n\n  static create<TPayload = any, TResponse = any, TSchema = any>(opt: {\n    name: string\n    type: MessageType\n    payload?: TPayload\n    schema?: TSchema\n    trackId?: string\n    created?: string\n    direction?: MessageDirection\n    module?: string\n  }) {\n    return new Message<TPayload, TResponse, TSchema>(\n      opt.name,\n      opt.type,\n      opt.payload,\n      opt.schema,\n      opt.trackId,\n      opt.created,\n      opt.direction,\n      opt.module,\n    )\n  }\n\n  static fromDto<TPayload = any, TResponse = any, TSchema = any>(\n    msg: Message<TPayload, TResponse, TSchema>,\n    direction = MessageDirection.ToClient,\n  ): Message<TPayload, TResponse, TSchema> {\n    return new Message<TPayload, TResponse, TSchema>(\n      msg.name,\n      msg.type,\n      msg.payload,\n      msg.schema,\n      msg.trackId,\n      msg.created,\n      direction,\n      msg.module,\n    )\n  }\n}\n","import * as signalR from \"@microsoft/signalr\"\nimport { Message } from \"./Message\"\nimport {\n  IMessageServiceQuerySubscription,\n  MessageDirection,\n  MessageType,\n  SubscribeResponse,\n  SubscribeResponseWithCatch,\n} from \"./MessageBridgeInterfaces\"\n\nexport abstract class MessageBridgeServiceBase {\n  connected = false\n  connection?: signalR.HubConnection\n  debugLogger: (...data: any[]) => void = window?.console.log || (() => {}) // set custom logger\n  debugLogging = {\n    messageReceived: false,\n    sendingMessage: false,\n    messageReceivedFilter: undefined as undefined | string | RegExp,\n    sendingMessageFilter: undefined as undefined | string | RegExp,\n  }\n\n  constructor(public wsUri: string) {}\n\n  abstract connect(options?: unknown): Promise<void>\n  abstract sendNetworkMessage(msg: Message): void\n\n  // return this.connection.start();\n\n  protected onMessage(messageString: string | Message) {\n    let messageDto: Message\n    try {\n      messageDto =\n        typeof messageString === \"string\"\n          ? (JSON.parse(messageString) as Message)\n          : messageString\n    } catch (e) {\n      this.onError(e as Error)\n      console.log(\"Incorrect message received: \" + messageString)\n      return\n    }\n    try {\n      const msg = Message.fromDto(messageDto)\n      if (this.debugLogging.messageReceived) {\n        let log = true\n        if (this.debugLogging.messageReceivedFilter) {\n          log = !!msg.name.match(this.debugLogging.messageReceivedFilter)\n        }\n        if (log) {\n          this.debugLogger(\"Bridge (messageReceived): \", msg)\n        }\n      }\n      this.handleIncomingMessage(msg)\n    } catch (e) {\n      console.log(\"Error in response handle for message: \" + e)\n    }\n  }\n\n  protected subscriptionTrackIdList: {\n    [trackId: string]: SubscribeResponseWithCatch<any>\n  } = {}\n\n  protected subscriptionEventList: {\n    [eventName: string]: SubscribeResponse<any>[]\n  } = {}\n\n  protected subscriptionQuery: IMessageServiceQuerySubscription<any, any>[] = []\n\n  history: Message[] = []\n  bridgeErrors: (Error | string)[] = []\n\n  sendMessage<TPayload = any, TResponse = any, TSchema = any>(\n    msg: Message<TPayload, TResponse, TSchema>,\n    onSuccess?: SubscribeResponse<TResponse>,\n    onError?: SubscribeResponse<any>,\n  ) {\n    msg.direction = MessageDirection.ToServer\n    if (onSuccess || onError) {\n      this.subscriptionTrackIdList[msg.trackId] = { onSuccess, onError }\n    }\n    this.internalSendMessage(msg)\n  }\n\n  protected internalSendMessage(msg: Message) {\n    this.history.push(msg)\n    if (this.debugLogging.sendingMessage) {\n      let log = true\n      if (this.debugLogging.sendingMessageFilter) {\n        log = !!msg.name.match(this.debugLogging.sendingMessageFilter)\n      }\n      if (log) {\n        this.debugLogger(\"Bridge (sendingMessage): \", msg)\n      }\n    }\n    this.sendNetworkMessage(msg)\n  }\n\n  subscribeEvent<TResponse = any>({\n    name,\n    onEvent,\n  }: {\n    name: string\n    onEvent: SubscribeResponse<TResponse>\n  }) {\n    if (!this.subscriptionEventList[name]) this.subscriptionEventList[name] = []\n    this.subscriptionEventList[name].push(onEvent)\n    return () => {\n      const index = this.subscriptionEventList[name].findIndex((x) => x === onEvent)\n      this.subscriptionEventList[name].splice(index, 1)\n    }\n  }\n\n  createCommandMessage<TPayload = any, TResponse = any, TSchema = any>(\n    name: string,\n    payload: TPayload,\n    direction = MessageDirection.ToServer,\n    module?: string,\n  ) {\n    return Message.create<TPayload, TResponse, TSchema>({\n      name,\n      type: MessageType.Command,\n      payload,\n      direction,\n      module,\n    })\n  }\n\n  createQueryMessage<TPayload = any>(\n    name: string,\n    payload: TPayload,\n    direction = MessageDirection.ToServer,\n    module?: string,\n  ) {\n    return Message.create({\n      name,\n      type: MessageType.Query,\n      payload,\n      direction,\n      module,\n    })\n  }\n\n  createEventMessage<TPayload = any>(\n    name: string,\n    payload: TPayload,\n    direction = MessageDirection.ToServer,\n    module?: string,\n  ) {\n    return Message.create({\n      name,\n      type: MessageType.Event,\n      payload,\n      direction,\n      module,\n    })\n  }\n\n  sendCommand<TPayload = any, TResponse = any, TSchema = any>({\n    name,\n    payload,\n    onSuccess,\n    onError,\n    module,\n  }: {\n    name: string\n    payload: TPayload\n    onSuccess?: SubscribeResponse<TResponse>\n    onError?: SubscribeResponse<any>\n    module?: string\n  }) {\n    const msg = this.createCommandMessage(name, payload, undefined, module)\n    this.sendMessage<TPayload, TResponse, TSchema>(msg, onSuccess, onError)\n    return msg\n  }\n\n  sendQuery<TPayload = any, TResponse = any, TSchema = any>({\n    name,\n    payload,\n    onSuccess,\n    onError,\n    module,\n  }: {\n    name: string\n    payload: TPayload\n    onSuccess?: SubscribeResponse<TResponse>\n    onError?: SubscribeResponse<any>\n    module?: string\n  }) {\n    const msg = this.createQueryMessage(name, payload, undefined, module)\n    this.sendMessage<TPayload, TResponse, TSchema>(msg, onSuccess, onError)\n    return msg\n  }\n\n  sendEvent<TPayload = any, TResponse = any, TSchema = any>({\n    name,\n    payload,\n    module,\n  }: {\n    name: string\n    payload: TPayload\n    module?: string\n  }) {\n    const msg = this.createEventMessage(name, payload, undefined, module)\n    this.sendMessage<TPayload, TResponse, TSchema>(msg)\n    return msg\n  }\n\n  subscribeQuery<TPayload = any, TResponse = any>(\n    opt: IMessageServiceQuerySubscription<TPayload, TResponse>,\n  ) {\n    //call right away\n    this.sendQuery({\n      name: opt.name,\n      payload: opt.query,\n      onSuccess: opt.onUpdate,\n      onError: opt.onError,\n      module: opt.module,\n    })\n    //then subscribe\n    this.subscriptionQuery.push(opt)\n\n    return /*unsubscribe*/ () => {\n      const index = this.subscriptionQuery.findIndex((x) => x === opt)\n      if (index > 0) {\n        this.subscriptionQuery.splice(index, 1)\n      }\n    }\n  }\n\n  // can be overwritten by consumer!\n  onError(err: Error) {\n    this.bridgeErrors.push(err)\n  }\n\n  handleIncomingMessage(msg: Message) {\n    this.history.push(msg)\n    if (this.subscriptionTrackIdList[msg.trackId]) {\n      if (msg.type === MessageType.Error) {\n        this.subscriptionTrackIdList[msg.trackId].onError?.(msg.payload, msg)\n      } else {\n        this.subscriptionTrackIdList[msg.trackId].onSuccess?.(msg.payload, msg)\n      }\n      delete this.subscriptionTrackIdList[msg.trackId]\n    }\n    if (msg.type === MessageType.Event) {\n      this.receiveEventMessage(msg)\n    }\n  }\n\n  protected receiveEventMessage(eventMsg: Message) {\n    if (this.subscriptionEventList[eventMsg.name]) {\n      this.subscriptionEventList[eventMsg.name].forEach((callback) =>\n        callback(eventMsg.payload, eventMsg),\n      )\n    }\n    this.subscriptionQuery\n      .filter((x) => x.triggers?.some((x) => x === eventMsg.name) ?? false)\n      .forEach((x) => {\n        const msg = this.createQueryMessage(x.name, x.query)\n        this.sendMessage(msg, x.onUpdate, x.onError)\n      })\n  }\n}\n","import * as signalR from \"@microsoft/signalr\"\nimport { Message } from \"./Message\"\nimport { IHttpConnectionOptions } from \"@microsoft/signalr/src/IHttpConnectionOptions\"\nimport { MessageBridgeServiceBase } from \"./MessageBridgeServiceBase\"\n\nexport class SignalRMessageBridgeService extends MessageBridgeServiceBase {\n  connect(options: IHttpConnectionOptions = {}): Promise<void> {\n    this.connection = new signalR.HubConnectionBuilder()\n      .withUrl(this.wsUri, options)\n      .withAutomaticReconnect()\n      .build()\n    this.connection.on(\"ReceiveMessage\", (messageString: string | Message) => {\n      this.onMessage(messageString)\n    })\n    return this.connection\n      .start()\n      .then(() => {\n        this.connected = true\n      })\n      .catch((err: Error) => {\n        this.onError(err)\n      })\n  }\n\n  sendNetworkMessage(msg: Message) {\n    const msgJson = JSON.stringify(msg)\n    this.connection?.invoke(\"SendMessage\", msgJson).catch((err) => {\n      this.onError(err as Error)\n      return console.error(err.toString())\n    })\n  }\n}\n","import { Message } from \"./Message\";\nimport { MessageBridgeServiceBase } from \"./MessageBridgeServiceBase\";\n\nexport class WebsocketMessageBridgeService extends MessageBridgeServiceBase {\n  socket?: WebSocket;\n  connectedCallback?: () => void;\n\n  connect() {\n    this.socket = new WebSocket(this.wsUri);\n    this.socket.addEventListener(\"message\", (event) => {\n      const messageString: string | Message = event.data;\n      this.onMessage(messageString);\n    });\n\n    return new Promise<void>((resolve, reject) => {\n      // Connection opened\n      this.socket?.addEventListener(\"open\", (event) => {\n        this.connected = true;\n        resolve();\n      });\n    });\n  }\n\n  sendNetworkMessage(msg: Message) {\n    const msgJson = JSON.stringify(msg);\n    this.socket?.send(msgJson);\n  }\n}\n"],"names":["MessageType","MessageDirection","Message","constructor","name","type","payload","schema","trackId","uuidv4","created","Date","now","toJSON","direction","ToServer","module","this","isError","Error","static","opt","msg","ToClient","MessageBridgeServiceBase","wsUri","connected","connection","debugLogger","_window","window","console","log","debugLogging","messageReceived","sendingMessage","messageReceivedFilter","undefined","sendingMessageFilter","subscriptionTrackIdList","subscriptionEventList","subscriptionQuery","history","bridgeErrors","onMessage","messageString","messageDto","JSON","parse","e","onError","fromDto","match","handleIncomingMessage","sendMessage","onSuccess","internalSendMessage","push","sendNetworkMessage","subscribeEvent","onEvent","index","findIndex","x","splice","createCommandMessage","create","Command","createQueryMessage","Query","createEventMessage","Event","sendCommand","sendQuery","sendEvent","subscribeQuery","query","onUpdate","err","_this$subscriptionTra","_this$subscriptionTra2","_this$subscriptionTra3","call","_this$subscriptionTra4","receiveEventMessage","eventMsg","forEach","callback","filter","triggers","_x$triggers","some","_x$triggers$some","connect","options","signalR","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","on","start","then","catch","_this$connection","msgJson","stringify","invoke","error","toString","WebsocketMessageBridgeService","socket","connectedCallback","WebSocket","addEventListener","event","data","Promise","resolve","reject","_this$socket","_this$socket2","send"],"mappings":"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"}