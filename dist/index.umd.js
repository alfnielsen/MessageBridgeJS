!function(e,s){"object"==typeof exports&&"undefined"!=typeof module?s(exports,require("@microsoft/signalr"),require("uuid")):"function"==typeof define&&define.amd?define(["exports","@microsoft/signalr","uuid"],s):s((e||self).messageBridgeJs={},e.signalr,e.uuid)}(this,function(e,s,t){var r,n;function o(s,t=e.MessageDirection.ToClient){return s.isError=s.type===e.MessageType.Error,s.direction??=t,s}function i(s){return{name:s.name,payload:s.payload,type:s.type,direction:s.direction??e.MessageDirection.ToClient,trackId:s.trackId??t.v4(),module:s.module,schema:s.schema,created:(new Date).toISOString(),isError:s.type===e.MessageType.Error}}function a(s){return i({...s,type:e.MessageType.Command})}function c(s){return i({...s,type:e.MessageType.Query})}function d(s){return i({...s,type:e.MessageType.Event})}e.MessageType=void 0,(r=e.MessageType||(e.MessageType={})).Command="Command",r.CommandResponse="CommandResponse",r.Query="Query",r.QueryResponse="QueryResponse",r.Event="Event",r.Error="Error",e.MessageDirection=void 0,(n=e.MessageDirection||(e.MessageDirection={})).ToClient="ToClient",n.ToServer="ToServer";class l{constructor(e){this.wsUri=void 0,this.connected=!1,this.trackedRequestMap={},this.subscribedEventListMap={},this.history=[],this.bridgeErrors=[],this.options={timeout:void 0,allowResponseValueWhenCancelled:!1,keepHistoryForReceivedMessages:!1,keepHistoryForSendingMessages:!1,logger:console?.log??(()=>{}),logParseIncomingMessageError:!0,timeoutFromBridgeOptionsMessage:e=>`Timeout after ${e}ms (BridgeOptions.timeout)`,timeoutFromRequestOptionsMessage:e=>`Timeout after ${e}ms (RequestOptions.timeout)`,logParseIncomingMessageErrorFormat:e=>["Bridge-Error (parse messageReceived):",e],logMessageReceived:!1,logMessageReceivedFormat:e=>["Bridge (messageReceived):",e],logSendingMessage:!1,logSendingMessageFormat:e=>["Bridge (sendingMessage):",e]},this.wsUri=e}setOptions(e){this.options={...this.options,...e}}getTrackedRequestMessage(e){return this.trackedRequestMap[e]?.requestMessage}cancelRequest(e){this.trackedRequestMap[e]&&(this.trackedRequestMap[e].requestMessage.cancelled=!0)}onConnect(){this.connected=!0,this.options.onConnect?.()}onError(e,s){void 0!==e&&this.bridgeErrors.push(e),this.options.onError?.(e,s)}onClose(e,s){void 0!==e&&this.bridgeErrors.push(e),this.connected=!1,this.options.onClose?.(e,s)}setOptionalRequestTimeout({requestMessage:e,timeout:s,onTimeout:t}){let r,n;if(void 0!==s?(r=this.options.timeoutFromRequestOptionsMessage?.(s)??`timeout after ${s}`,n=s):void 0!==this.options.timeout&&(r=this.options.timeoutFromBridgeOptionsMessage?.(this.options.timeout)??`timeout after ${this.options.timeout}`,n=this.options.timeout),void 0!==n)return setTimeout(()=>{e.timedOut=!0,t({reason:r,responseMessage:void 0,request:e.payload,requestMessage:e})},n)}sendMessageTracked(e){if(e.requestMessage.cancelled){let s=!0;if(void 0!==e.requestOptions.sendCancelled?s=!e.requestOptions.sendCancelled:this.options.sendCancelledRequest&&(s=!1),s)return Promise.resolve({request:e.requestMessage.payload,requestMessage:e.requestMessage,cancelled:!0})}return new Promise((s,t)=>{this.sendMessagePromiseHandler({...e,handleSuccess:(e,t)=>{s(t)},handleError:(e,r)=>{this.options.throwOnTrackedError?t(r):s(r)}})}).finally(()=>{delete this.trackedRequestMap[e.requestMessage.trackId]})}sendMessage(e){const s=void 0;if(e.requestMessage.cancelled){let t=!0;if(void 0!==e.requestOptions.sendCancelled?t=!e.requestOptions.sendCancelled:this.options.sendCancelledRequest&&(t=!1),t)return Promise.resolve(s)}return new Promise((t,r)=>{this.sendMessagePromiseHandler({...e,handleSuccess:(e,r)=>{t(e?s:r.response)},handleError:(e,n,o)=>{e&&t(s),this.options.avoidThrowOnNonTrackedError?t(o?.payload):r(n)}})})}sendMessagePromiseHandler({handleError:s,handleSuccess:t,requestMessage:r,requestOptions:n}){r.direction=e.MessageDirection.ToServer,this.options.interceptSendMessage&&(r=this.options.interceptSendMessage(r));const o=(e,t)=>{i&&clearTimeout(i);const o={response:void 0,responseMessage:void 0,request:r.payload,requestMessage:r,isError:!0,error:t.reason,errorMessage:t.responseMessage,cancelled:r.cancelled||t.requestMessage?.cancelled||t.responseMessage?.cancelled,timedOut:r.timedOut||t.requestMessage?.timedOut||t.responseMessage?.timedOut};e&&this.options.callOnErrorWhenRequestIsCancelled&&n.callOnErrorWhenRequestIsCancelled||(this.onError(o),n.onError?.(o)),s(e,o,t)},i=this.setOptionalRequestTimeout({requestMessage:r,timeout:n.timeout,onTimeout:e=>{const s=this.handleCancelOptions(n,r);o(s,e)}});this.trackedRequestMap[r.trackId]={successTrack:e=>{const{response:s,cancelled:o}=this.handleCancelResponse(n,r,e),a={response:s,responseMessage:e,requestOptions:n,request:r.payload,requestMessage:r,isError:!1,cancelled:r.cancelled||e.cancelled,timedOut:r.timedOut||e.timedOut};i&&clearTimeout(i),(!o||this.options.callOnSuccessWhenRequestIsCancelled||n.callOnSuccessWhenRequestIsCancelled)&&(this.options.onSuccess?.(a),n.onSuccess?.(a)),t(o,a)},errorTrack:e=>{const{response:s,cancelled:t}=this.handleCancelResponse(n,r,e);o(t,{reason:s,responseMessage:e,request:r.payload,requestMessage:r})},requestMessage:r,requestOptions:n},this.internalSendMessage(r)}handleCancelOptions(e,s,t){let r=!1;void 0!==e.resolveCancelledForNonTracked?r=e.resolveCancelledForNonTracked:this.options.resolveCancelledNonTrackedRequest&&(r=!0);let n=!1;return(t?.cancelled||s.cancelled)&&(n=!0),r&&n&&(n=!1),n}handleCancelResponse(e,s,t){const r=this.handleCancelOptions(e,s,t);let n=t?.payload;return r&&(void 0!==e.allowResponseValueWhenCancelled?!0!==e.allowResponseValueWhenCancelled&&(n=void 0):!0!==this.options.allowResponseValueWhenCancelled&&(n=void 0)),{response:n,cancelled:r}}subscribeEvent({name:e,onEvent:s}){if(Array.isArray(e)){const t=e.map(e=>this.subscribeEvent({name:e,onEvent:s}));return()=>t.forEach(e=>e())}return this.subscribedEventListMap[e]||(this.subscribedEventListMap[e]=[]),this.subscribedEventListMap[e].push(s),()=>{const t=this.subscribedEventListMap[e].findIndex(e=>e===s);this.subscribedEventListMap[e].splice(t,1)}}createTrackedMessage(e){const s=e.requestMessage.trackId;let t={trackId:s,requestMessage:e.requestMessage,requestOptions:e.requestOptions,send:()=>this.sendMessage(e),sendTracked:()=>this.sendMessageTracked(e),cancel:()=>{e?.requestMessage&&(e.requestMessage.cancelled=!0),this.cancelRequest(s)}};return this.options.interceptCreatedMessageOptions&&(t=this.options.interceptCreatedMessageOptions(t)),t}createCommand(e){const s=a(e);return this.createTrackedMessage({requestMessage:s,requestOptions:e})}createQuery(e){const s=c(e);return this.createTrackedMessage({requestMessage:s,requestOptions:e})}sendCommand(e){return this.createCommand(e).send()}sendCommandTracked(e){return this.createCommand(e).sendTracked()}sendQuery(e){return this.createQuery(e).send()}sendQueryTracked(e){return this.createQuery(e).sendTracked()}createEvent(s){let t=d(s);t.direction=e.MessageDirection.ToServer;let r={trackId:t.trackId,requestMessage:t,requestOptions:s,cancel:()=>{t&&(t.cancelled=!0)},send:()=>{if(t.cancelled)if(void 0!==s.sendCancelled){if(!s.sendCancelled)return}else if(!this.options.sendCancelledRequest)return;this.options.interceptSendMessage&&(t=this.options.interceptSendMessage(t)),this.internalSendMessage(t)}};return this.options.interceptCreatedEventMessageOptions&&(r=this.options.interceptCreatedEventMessageOptions(r)),r}sendEvent(e){return this.createEvent(e).send()}onMessage(e){let s;try{s="string"==typeof e?JSON.parse(e):e}catch(e){return void this.onError(e)}try{let e=o(s);this.options.interceptReceivedMessage&&(e=this.options.interceptReceivedMessage(e)),this.handleIncomingMessage(e)}catch(e){if(this.onError(e),this.options.logger&&this.options.logParseIncomingMessageError){const t=this.options.logParseIncomingMessageErrorFormat?.(s)??[e];this.options.logger(t)}}}internalSendMessage(e){if(this.options.keepHistoryForSendingMessages&&this.history.push(e),this.options.logger&&this.options.logSendingMessage){let s=!0;if(this.options.logSendingMessageFilter&&(s=!!e.name.match(this.options.logSendingMessageFilter)),s){const s=this.options.logSendingMessageFormat?.(e)??[e];this.options.logger(...s)}}this.options.onSend?.(e),this.sendNetworkMessage(e)}handleIncomingMessage(s){if(this.options.keepHistoryForReceivedMessages&&this.history.push(s),this.options.logger&&this.options.logMessageReceived){let e=!0;if(this.options.logMessageReceivedFilter&&(e=!!s.name.match(this.options.logMessageReceivedFilter)),e){const e=this.options.logMessageReceivedFormat?.(s)??[s];this.options.logger(...e)}}this.options.onMessage?.(s);let t=s.type!==e.MessageType.Error;if(s.type===e.MessageType.Event)return void this.receiveEventMessage(s);const r=this.trackedRequestMap[s.trackId];r&&(s.type===e.MessageType.Error?(r.errorTrack(s),t=!0):r.successTrack(s),delete this.trackedRequestMap[s.trackId]),t||this.onError?.(s)}receiveEventMessage(e){this.subscribedEventListMap[e.name]&&this.subscribedEventListMap[e.name].forEach(s=>s(e.payload,e))}}e.ClientSideMessageBridgeService=class extends l{constructor(...e){super(...e),this.server=void 0}setServer(e){this.server=e}connect(){if(!this.server)throw new Error("No server set");return this.server?.connect(e=>{const s=JSON.parse(JSON.stringify(e));this.onMessage(s),this.onConnect()}),Promise.resolve()}close(){this.onClose()}sendNetworkMessage(e){const s=JSON.parse(JSON.stringify(e));setTimeout(()=>{this.server?.onMessage(s)},10)}},e.InMemoryClientSideServer=class{constructor(){this.store={},this.commands={},this.queries={},this.eventListeners={},this.sendMessage=void 0}saveToLocalStorage(e){localStorage.setItem(e,JSON.stringify(this.store))}loadFromLocalStorage(e){const s=localStorage.getItem(e);s&&(this.store=JSON.parse(s))}connect(e){this.sendMessage=e}sendError(s,t,r,n){const o=i({trackId:t,type:e.MessageType.Error,name:"Error",payload:s,direction:e.MessageDirection.ToClient,cancelled:r,timedOut:n});this.sendMessage?.(o)}createMessage(s){return i({...s,direction:e.MessageDirection.ToClient})}sendResponse(e){const s=this.createMessage(e);this.sendMessage?.(s)}sendEvent(s,t){const r=i({type:e.MessageType.Event,name:s,payload:t,direction:e.MessageDirection.ToClient});this.sendMessage?.(r)}onMessage(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(s){return this.sendError({message:`Error parsing message: ${s}`,request:e,error:s,stack:s?.stack}),void console.error("Error parsing message",s)}if("Command"===e.type){if(!this.commands[e.name])return void this.sendError({message:`Command ${e.name} not found (Register it with addCommand)`,request:e},e.trackId);this.serverHandleCommand(e)}if("Query"===e.type){if(!this.queries[e.name])return void this.sendError({message:`Query ${e.name} not found (Register it with addQuery)`,request:e},e.trackId);this.serverHandleQuery(e)}if("Event"===e.type){if(!this.eventListeners[e.name])return void this.sendError({message:`Event ${e.name} not found (Register it with addEvent)`,request:e},e.trackId);this.serverHandleEvent(e)}}serverHandleCommand(s){const t=this.commands[s.name],r=e=>{this.sendMessage?.(e)},n=t=>this.createMessage({name:s.name,type:e.MessageType.CommandResponse,payload:t,trackId:s.trackId}),o=e=>{const s=n(e);r(s)},i=(e,t,r)=>{this.sendError({message:e,request:s},s.trackId,t,r)},a=(e,s)=>{this.sendEvent(e,s)};try{t({requestMessage:s,request:s.payload,store:this.store,error:i,event:a,response:o,createResponseMessage:n,sendResponseMessage:r})}catch(e){i({message:`Error in command handler for '${s.name}'`,requestMessage:s,error:e,stack:e?.stack})}}serverHandleQuery(s){const t=e=>{this.sendMessage?.(e)},r=t=>this.createMessage({name:s.name,type:e.MessageType.QueryResponse,payload:t,trackId:s.trackId});(0,this.queries[s.name])({requestMessage:s,request:s.payload,store:this.store,error:(e,t,r)=>{this.sendError({message:e,request:s},s.trackId,t,r)},event:(e,s)=>{this.sendEvent(e,s)},response:e=>{const s=r(e);t(s)},createResponseMessage:r,sendResponseMessage:t})}serverHandleEvent(e){(0,this.eventListeners[e.name])({requestMessage:e,request:e.payload,store:this.store,error:s=>{this.sendError({message:s,request:e},e.trackId)},event:(e,s)=>{this.sendEvent(e,s)}})}addCommand(e,s){this.commands[e]=s}addQuery(e,s){this.queries[e]=s}addEventListener(e,s){this.eventListeners[e]=s}},e.MessageBridgeServiceBase=l,e.SignalRMessageBridgeService=class extends l{constructor(...e){super(...e),this.connection=void 0}connect(e={}){if(this.connection=(new s.HubConnectionBuilder).withUrl(this.wsUri,e).withAutomaticReconnect().build(),!this.connection)throw new Error("Failed to create SignalR connection");return this.connection.on("ReceiveMessage",e=>{this.onMessage(e)}),this.connection.onclose(e=>{this.onClose(e)}),this.connection.start().then(()=>{this.onConnect()}).catch(e=>{this.onError(e)})}close(){this.connection?.stop(),this.onClose()}sendNetworkMessage(e){const s=JSON.stringify(e);this.connection?.invoke("SendMessage",s).catch(e=>(this.onError(e),console.error(e.toString())))}},e.WebsocketMessageBridgeService=class extends l{constructor(...e){super(...e),this.socket=void 0,this.connectedCallback=void 0}connect(){return this.socket=new WebSocket(this.wsUri),this.socket.addEventListener("message",e=>{this.onMessage(e.data)}),this.socket.addEventListener("close",e=>{this.onClose(e.reason,e)}),this.socket.addEventListener("error",e=>{this.onError(e,e)}),new Promise((e,s)=>{this.socket?.addEventListener("open",s=>{this.onConnect(),e()})})}close(){this.socket?.close(),this.onClose()}sendNetworkMessage(e){const s=JSON.stringify(e);this.socket?.send(s)}},e.createCommandMessage=a,e.createEventMessage=d,e.createMessage=i,e.createMessageFromDto=o,e.createQueryMessage=c});
//# sourceMappingURL=index.umd.js.map
