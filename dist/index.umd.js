!function(e,s){"object"==typeof exports&&"undefined"!=typeof module?s(exports,require("@microsoft/signalr"),require("uuid")):"function"==typeof define&&define.amd?define(["exports","@microsoft/signalr","uuid"],s):s((e||self).messageBridgeJs={},e.signalr,e.uuid)}(this,function(e,s,t){var r,o;function n(s,t=e.MessageDirection.ToClient){return s.isError=s.type===e.MessageType.Error,s.direction??=t,s}function i(s){return{name:s.name,payload:s.payload,type:s.type,direction:s.direction??e.MessageDirection.ToClient,trackId:s.trackId??t.v4(),module:s.module,schema:s.schema,created:(new Date).toISOString(),isError:s.type===e.MessageType.Error}}function a(s){return i({...s,type:e.MessageType.Command})}function c(s){return i({...s,type:e.MessageType.Query})}function d(s){return i({...s,type:e.MessageType.Event,payload:void 0})}e.MessageType=void 0,(r=e.MessageType||(e.MessageType={})).Command="Command",r.CommandResponse="CommandResponse",r.Query="Query",r.QueryResponse="QueryResponse",r.Event="Event",r.Error="Error",e.MessageDirection=void 0,(o=e.MessageDirection||(e.MessageDirection={})).ToClient="ToClient",o.ToServer="ToServer";class g{constructor(e){this.wsUri=void 0,this.connected=!1,this.subscribedTrackIdMap={},this.subscribedEventListMap={},this.history=[],this.bridgeErrors=[],this.options={timeout:void 0,keepHistoryForReceivedMessages:!1,keepHistoryForSendingMessages:!1,logger:()=>console?.log??(()=>{}),logParseIncomingMessageError:!0,timeoutFromBridgeOptionsMessage:e=>`Timeout after ${e}ms (BridgeOptions.timeout)`,timeoutFromRequestOptionsMessage:e=>`Timeout after ${e}ms (RequestOptions.timeout)`,logParseIncomingMessageErrorFormat:e=>["Bridge-Error (parse messageReceived):",e],logMessageReceived:!1,logMessageReceivedFormat:e=>["Bridge (messageReceived):",e],logSendingMessage:!1,logSendingMessageFormat:e=>["Bridge (sendingMessage):",e]},this.wsUri=e}setOptions(e){this.options={...this.options,...e}}getTrackedRequestMessage(e){return this.subscribedTrackIdMap[e]?.requestMessage}onConnect(){this.connected=!0,this.options.onConnect?.()}onError(e,s){void 0!==e&&this.bridgeErrors.push(e),this.options.onError?.(e,s)}onClose(e,s){void 0!==e&&this.bridgeErrors.push(e),this.connected=!1,this.options.onClose?.(e,s)}setOptionalRequestTimeout({requestMessage:e,timeout:s,onTimeout:t}){let r,o;if(void 0!==this.options.timeout&&(r=this.options.timeoutFromBridgeOptionsMessage?.(this.options.timeout)??`timeout after ${this.options.timeout}`,o=this.options.timeout),void 0!==s&&(r=this.options.timeoutFromRequestOptionsMessage?.(s)??`timeout after ${s}`,o=s),void 0!==o)return setTimeout(()=>{t({reason:r,responseMessage:void 0,request:e.payload,requestMessage:e})},o)}sendMessageTracked(e){return new Promise((s,t)=>{this.sendMessagePromiseHandler({...e,handleResponseReject:(e,r)=>{e&&this.options.throwOnTrackedError?t(r):s(r)}})}).finally(()=>{delete this.subscribedTrackIdMap[e.requestMessage.trackId]})}sendMessage(e){return new Promise((s,t)=>{this.sendMessagePromiseHandler({...e,handleResponseReject:(e,r,o)=>{e?this.options.avoidThrowOnNonTrackedError?s(o?.payload):t(r):s(r.response)}})})}sendMessagePromiseHandler({handleResponseReject:s,requestMessage:t,onSuccess:r,onError:o,timeout:n}){t.direction=e.MessageDirection.ToServer,this.options.interceptSendMessage&&(t=this.options.interceptSendMessage(t));const i=e=>{a&&clearTimeout(a);const r={response:void 0,responseMessage:void 0,request:t.payload,requestMessage:t,isError:!0,error:e.reason,errorMessage:e.responseMessage};this.onError(r),o?.(r),s(!0,r,e)},a=this.setOptionalRequestTimeout({requestMessage:t,timeout:n,onTimeout:e=>{i(e)}});this.subscribedTrackIdMap[t.trackId]={successTrack:e=>{const o={response:e.payload,responseMessage:e,request:t.payload,requestMessage:t,isError:!1};a&&clearTimeout(a),r?.(o),s(!1,o,void 0)},errorTrack:e=>{i({reason:e?.payload,responseMessage:e,request:t.payload,requestMessage:t})},requestMessage:t},this.internalSendMessage(t)}subscribeEvent({name:e,onEvent:s}){if(Array.isArray(e)){const t=e.map(e=>this.subscribeEvent({name:e,onEvent:s}));return()=>t.forEach(e=>e())}return this.subscribedEventListMap[e]||(this.subscribedEventListMap[e]=[]),this.subscribedEventListMap[e].push(s),()=>{const t=this.subscribedEventListMap[e].findIndex(e=>e===s);this.subscribedEventListMap[e].splice(t,1)}}sendCommand(e){const s=a(e);return this.sendMessage({requestMessage:s,onSuccess:e.onSuccess,onError:e.onError,timeout:e.timeout})}sendCommandTracked(e){const s=a(e);return this.sendMessageTracked({requestMessage:s,onSuccess:e.onSuccess,onError:e.onError,timeout:e.timeout})}sendQuery(e){const s=c(e);return this.sendMessage({requestMessage:s,onSuccess:e.onSuccess,onError:e.onError,timeout:e.timeout})}sendQueryTracked(e){const s=c(e);return this.sendMessageTracked({requestMessage:s,onSuccess:e.onSuccess,onError:e.onError,timeout:e.timeout})}sendEvent(s){let t=d(s);return t.direction=e.MessageDirection.ToServer,this.options.interceptSendMessage&&(t=this.options.interceptSendMessage(t)),this.internalSendMessage(t),t}onMessage(e){let s;try{s="string"==typeof e?JSON.parse(e):e}catch(e){return void this.onError(e)}try{let e=n(s);this.options.interceptReceivedMessage&&(e=this.options.interceptReceivedMessage(e)),this.handleIncomingMessage(e)}catch(e){if(this.onError(e),this.options?.logger&&this.options?.logParseIncomingMessageError){const t=this.options?.logParseIncomingMessageErrorFormat?.(s)??[e];this.options.logger(t)}}}internalSendMessage(e){if(this.options.keepHistoryForSendingMessages&&this.history.push(e),this.options?.logger&&this.options?.logSendingMessage){let s=!0;if(this.options?.logSendingMessageFilter&&(s=!!e.name.match(this.options?.logSendingMessageFilter)),s){const s=this.options?.logSendingMessageFormat?.(e)??[e];this.options.logger(...s)}}this.options.onSend?.(e),this.sendNetworkMessage(e)}handleIncomingMessage(s){if(this.options.keepHistoryForReceivedMessages&&this.history.push(s),this.options?.logger&&this.options?.logMessageReceived){let e=!0;if(this.options?.logMessageReceivedFilter&&(e=!!s.name.match(this.options?.logMessageReceivedFilter)),e){const e=this.options?.logMessageReceivedFormat?.(s)??[s];this.options.logger(...e)}}this.options.onMessage?.(s);let t=s.type!==e.MessageType.Error;if(s.type===e.MessageType.Event)return void this.receiveEventMessage(s);const r=this.subscribedTrackIdMap[s.trackId];r&&(s.type===e.MessageType.Error?(r.errorTrack?.(s),t=!0):r.successTrack?.(s),delete this.subscribedTrackIdMap[s.trackId]),t||this.onError?.(s)}receiveEventMessage(e){this.subscribedEventListMap[e.name]&&this.subscribedEventListMap[e.name].forEach(s=>s(e.payload,e))}}e.ClientSideMessageBridgeService=class extends g{constructor(...e){super(...e),this.server=void 0}setServer(e){this.server=e}connect(){if(!this.server)throw new Error("No server set");return this.server?.connect(e=>{this.onMessage(e),this.onConnect()}),Promise.resolve()}close(){this.onClose()}sendNetworkMessage(e){setTimeout(()=>{this.server?.onMessage(e)},10)}},e.InMemoryClientSideServer=class{constructor(){this.store={},this.commands={},this.queries={},this.eventListeners={},this.sendMessage=void 0}saveToLocalStorage(e){localStorage.setItem(e,JSON.stringify(this.store))}loadFromLocalStorage(e){const s=localStorage.getItem(e);s&&(this.store=JSON.parse(s))}connect(e){this.sendMessage=e}sendError(s,t){const r=i({trackId:t,type:e.MessageType.Error,name:"Error",payload:s,direction:e.MessageDirection.ToClient});this.sendMessage?.(r)}sendResponse(s,t,r,o){const n=i({trackId:o,type:s,name:t,payload:r,direction:e.MessageDirection.ToClient});this.sendMessage?.(n)}sendEvent(s,t){const r=i({type:e.MessageType.Event,name:s,payload:t,direction:e.MessageDirection.ToClient});this.sendMessage?.(r)}onMessage(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(s){return this.sendError({message:`Error parsing message: ${s}`,request:e,error:s,stack:s?.stack}),void console.error("Error parsing message",s)}if("Command"===e.type){if(!this.commands[e.name])return void this.sendError({message:`Command ${e.name} not found (Register it with addCommand)`,request:e},e.trackId);this.serverHandleCommand(e)}if("Query"===e.type){if(!this.queries[e.name])return void this.sendError({message:`Query ${e.name} not found (Register it with addQuery)`,request:e},e.trackId);this.serverHandleQuery(e)}if("Event"===e.type){if(!this.eventListeners[e.name])return void this.sendError({message:`Event ${e.name} not found (Register it with addEvent)`,request:e},e.trackId);this.serverHandleEvent(e)}}serverHandleCommand(s){const t=this.commands[s.name],r=t=>{this.sendResponse(e.MessageType.CommandResponse,s.name,t,s.trackId)},o=e=>{this.sendError({message:e,request:s},s.trackId)},n=(e,s)=>{this.sendEvent(e,s)};try{t({requestMessage:s,request:s.payload,store:this.store,error:o,event:n,response:r})}catch(e){o({message:`Error in command handler for '${s.name}'`,requestMessage:s,error:e,stack:e?.stack})}}serverHandleQuery(s){(0,this.queries[s.name])({requestMessage:s,request:s.payload,store:this.store,error:e=>{this.sendError({message:e,request:s},s.trackId)},event:(e,s)=>{this.sendEvent(e,s)},response:t=>{this.sendResponse(e.MessageType.QueryResponse,s.name,t,s.trackId)}})}serverHandleEvent(e){(0,this.eventListeners[e.name])({requestMessage:e,request:e.payload,store:this.store,error:s=>{this.sendError({message:s,request:e},e.trackId)},event:(e,s)=>{this.sendEvent(e,s)}})}addCommand(e,s){this.commands[e]=s}addQuery(e,s){this.queries[e]=s}addEventListener(e,s){this.eventListeners[e]=s}},e.MessageBridgeServiceBase=g,e.SignalRMessageBridgeService=class extends g{constructor(...e){super(...e),this.connection=void 0}connect(e={}){if(this.connection=(new s.HubConnectionBuilder).withUrl(this.wsUri,e).withAutomaticReconnect().build(),!this.connection)throw new Error("Failed to create SignalR connection");return this.connection.on("ReceiveMessage",e=>{this.onMessage(e)}),this.connection.onclose(e=>{this.onClose(e)}),this.connection.start().then(()=>{this.onConnect()}).catch(e=>{this.onError(e)})}close(){this.connection?.stop(),this.onClose()}sendNetworkMessage(e){const s=JSON.stringify(e);this.connection?.invoke("SendMessage",s).catch(e=>(this.onError(e),console.error(e.toString())))}},e.WebsocketMessageBridgeService=class extends g{constructor(...e){super(...e),this.socket=void 0,this.connectedCallback=void 0}connect(){return this.socket=new WebSocket(this.wsUri),this.socket.addEventListener("message",e=>{this.onMessage(e.data)}),this.socket.addEventListener("close",e=>{this.onClose(e.reason,e)}),this.socket.addEventListener("error",e=>{this.onError(e,e)}),new Promise((e,s)=>{this.socket?.addEventListener("open",s=>{this.onConnect(),e()})})}close(){this.socket?.close(),this.onClose()}sendNetworkMessage(e){const s=JSON.stringify(e);this.socket?.send(s)}},e.createCommandMessage=a,e.createEventMessage=d,e.createMessage=i,e.createMessageFromDto=n,e.createQueryMessage=c});
//# sourceMappingURL=index.umd.js.map
