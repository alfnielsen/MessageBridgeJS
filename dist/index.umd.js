!function(e,s){"object"==typeof exports&&"undefined"!=typeof module?s(exports,require("@microsoft/signalr"),require("uuid")):"function"==typeof define&&define.amd?define(["exports","@microsoft/signalr","uuid"],s):s((e||self).messageBridgeJs={},e.signalR,e.uuid)}(this,function(e,s,t){function i(e){if(e&&e.__esModule)return e;var s=Object.create(null);return e&&Object.keys(e).forEach(function(t){if("default"!==t){var i=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(s,t,i.get?i:{enumerable:!0,get:function(){return e[t]}})}}),s.default=e,s}var r,n,o=/*#__PURE__*/i(s);e.MessageType=void 0,(r=e.MessageType||(e.MessageType={})).Command="Command",r.CommandResponse="CommandResponse",r.Query="Query",r.QueryResponse="QueryResponse",r.Event="Event",r.Error="Error",e.MessageDirection=void 0,(n=e.MessageDirection||(e.MessageDirection={})).ToClient="ToClient",n.ToServer="ToServer";class a{constructor(s,i,r,n,o=t.v4(),a=new Date(Date.now()).toJSON(),c=e.MessageDirection.ToServer,d){this.module=void 0,this.name=void 0,this.type=void 0,this.isError=void 0,this.trackId=void 0,this.created=void 0,this.payload=void 0,this.schema=void 0,this.direction=void 0,this.module=d,this.name=s,this.type=i,this.trackId=o,this.created=a,this.payload=r,this.schema=n,this.direction=c,this.isError=i===e.MessageType.Error}static create(e){return new a(e.name,e.type,e.payload,e.schema,e.trackId,e.created,e.direction,e.module)}static fromDto(s,t=e.MessageDirection.ToClient){return new a(s.name,s.type,s.payload,s.schema,s.trackId,s.created,t,s.module)}}class c{constructor(e){this.wsUri=void 0,this.connected=!1,this.connection=void 0,this.debugLogger=window?.console.log||(()=>{}),this.debugLogging={messageReceived:!1,sendingMessage:!1,messageReceivedFilter:void 0,sendingMessageFilter:void 0},this.subscriptionTrackIdList={},this.subscriptionEventList={},this.subscriptionQuery=[],this.history=[],this.bridgeErrors=[],this.wsUri=e}onMessage(e){let s;try{s="string"==typeof e?JSON.parse(e):e}catch(s){return this.onError(s),void console.log("Incorrect message received: "+e)}try{const e=a.fromDto(s);if(this.debugLogging.messageReceived){let s=!0;this.debugLogging.messageReceivedFilter&&(s=!!e.name.match(this.debugLogging.messageReceivedFilter)),s&&this.debugLogger("Bridge (messageReceived): ",e)}this.handleIncomingMessage(e)}catch(e){console.log("Error in response handle for message: "+e)}}sendMessage(s,t,i){s.direction=e.MessageDirection.ToServer,(t||i)&&(this.subscriptionTrackIdList[s.trackId]={onSuccess:t,onError:i}),this.internalSendMessage(s)}internalSendMessage(e){if(this.history.push(e),this.debugLogging.sendingMessage){let s=!0;this.debugLogging.sendingMessageFilter&&(s=!!e.name.match(this.debugLogging.sendingMessageFilter)),s&&this.debugLogger("Bridge (sendingMessage): ",e)}this.sendNetworkMessage(e)}subscribeEvent({name:e,onEvent:s}){return this.subscriptionEventList[e]||(this.subscriptionEventList[e]=[]),this.subscriptionEventList[e].push(s),()=>{const t=this.subscriptionEventList[e].findIndex(e=>e===s);this.subscriptionEventList[e].splice(t,1)}}createCommandMessage(s,t,i=e.MessageDirection.ToServer,r){return a.create({name:s,type:e.MessageType.Command,payload:t,direction:i,module:r})}createQueryMessage(s,t,i=e.MessageDirection.ToServer,r){return a.create({name:s,type:e.MessageType.Query,payload:t,direction:i,module:r})}createEventMessage(s,t,i=e.MessageDirection.ToServer,r){return a.create({name:s,type:e.MessageType.Event,payload:t,direction:i,module:r})}sendCommand({name:e,payload:s,onSuccess:t,onError:i,module:r}){const n=this.createCommandMessage(e,s,void 0,r);return this.sendMessage(n,t,i),n}sendQuery({name:e,payload:s,onSuccess:t,onError:i,module:r}){const n=this.createQueryMessage(e,s,void 0,r);return this.sendMessage(n,t,i),n}sendEvent({name:e,payload:s,module:t}){const i=this.createEventMessage(e,s,void 0,t);return this.sendMessage(i),i}subscribeQuery(e){return this.sendQuery({name:e.name,payload:e.query,onSuccess:e.onUpdate,onError:e.onError,module:e.module}),this.subscriptionQuery.push(e),()=>{const s=this.subscriptionQuery.findIndex(s=>s===e);s>0&&this.subscriptionQuery.splice(s,1)}}onError(e){this.bridgeErrors.push(e)}handleIncomingMessage(s){this.history.push(s),this.subscriptionTrackIdList[s.trackId]&&(s.type===e.MessageType.Error?this.subscriptionTrackIdList[s.trackId].onError?.(s.payload,s):this.subscriptionTrackIdList[s.trackId].onSuccess?.(s.payload,s),delete this.subscriptionTrackIdList[s.trackId]),s.type===e.MessageType.Event&&this.receiveEventMessage(s)}receiveEventMessage(e){this.subscriptionEventList[e.name]&&this.subscriptionEventList[e.name].forEach(s=>s(e.payload,e)),this.subscriptionQuery.filter(s=>s.triggers?.some(s=>s===e.name)??!1).forEach(e=>{const s=this.createQueryMessage(e.name,e.query);this.sendMessage(s,e.onUpdate,e.onError)})}}e.Message=a,e.MessageBridgeService=class extends c{connect(e={}){return this.connection=(new o.HubConnectionBuilder).withUrl(this.wsUri,e).withAutomaticReconnect().build(),this.connection.on("ReceiveMessage",e=>{this.onMessage(e)}),this.connection.start().then(()=>{this.connected=!0}).catch(e=>{this.onError(e)})}sendNetworkMessage(e){const s=JSON.stringify(e);this.connection?.invoke("SendMessage",s).catch(e=>(this.onError(e),console.error(e.toString())))}},e.MessageBridgeServiceBase=c,e.WebsocketMessageBridgeService=class extends c{constructor(...e){super(...e),this.socket=void 0,this.connectedCallback=void 0}connect(){return this.socket=new WebSocket(this.wsUri),this.socket.addEventListener("message",e=>{this.onMessage(e.data)}),new Promise((e,s)=>{this.socket?.addEventListener("open",s=>{this.connected=!0,e()})})}sendNetworkMessage(e){const s=JSON.stringify(e);this.socket?.send(s)}}});
//# sourceMappingURL=index.umd.js.map
