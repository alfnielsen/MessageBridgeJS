import*as e from"@microsoft/signalr";import{v4 as s}from"uuid";var t,i;!function(e){e.Command="Command",e.CommandResponse="CommandResponse",e.Query="Query",e.QueryResponse="QueryResponse",e.Event="Event",e.Error="Error"}(t||(t={})),function(e){e.ToClient="ToClient",e.ToServer="ToServer"}(i||(i={}));class r{constructor(e,r,n,o,a=s(),c=new Date(Date.now()).toJSON(),d=i.ToServer,h){this.module=void 0,this.name=void 0,this.type=void 0,this.isError=void 0,this.trackId=void 0,this.created=void 0,this.payload=void 0,this.schema=void 0,this.direction=void 0,this.module=h,this.name=e,this.type=r,this.trackId=a,this.created=c,this.payload=n,this.schema=o,this.direction=d,this.isError=r===t.Error}static create(e){return new r(e.name,e.type,e.payload,e.schema,e.trackId,e.created,e.direction,e.module)}static fromDto(e,s=i.ToClient){return new r(e.name,e.type,e.payload,e.schema,e.trackId,e.created,s,e.module)}}class n{constructor(e){this.wsUri=void 0,this.connected=!1,this.connection=void 0,this.debugLogger=window?.console.log||(()=>{}),this.debugLogging={messageReceived:!1,sendingMessage:!1,messageReceivedFilter:void 0,sendingMessageFilter:void 0},this.subscriptionTrackIdList={},this.subscriptionEventList={},this.subscriptionQuery=[],this.history=[],this.bridgeErrors=[],this.wsUri=e}onMessage(e){let s;try{s="string"==typeof e?JSON.parse(e):e}catch(s){return this.onError(s),void console.log("Incorrect message received: "+e)}try{const e=r.fromDto(s);if(this.debugLogging.messageReceived){let s=!0;this.debugLogging.messageReceivedFilter&&(s=!!e.name.match(this.debugLogging.messageReceivedFilter)),s&&this.debugLogger("Bridge (messageReceived): ",e)}this.handleIncomingMessage(e)}catch(e){console.log("Error in response handle for message: "+e)}}sendMessage(e,s,t){e.direction=i.ToServer,(s||t)&&(this.subscriptionTrackIdList[e.trackId]={onSuccess:s,onError:t}),this.internalSendMessage(e)}internalSendMessage(e){if(this.history.push(e),this.debugLogging.sendingMessage){let s=!0;this.debugLogging.sendingMessageFilter&&(s=!!e.name.match(this.debugLogging.sendingMessageFilter)),s&&this.debugLogger("Bridge (sendingMessage): ",e)}this.sendNetworkMessage(e)}subscribeEvent({name:e,onEvent:s}){return this.subscriptionEventList[e]||(this.subscriptionEventList[e]=[]),this.subscriptionEventList[e].push(s),()=>{const t=this.subscriptionEventList[e].findIndex(e=>e===s);this.subscriptionEventList[e].splice(t,1)}}createCommandMessage(e,s,n=i.ToServer,o){return r.create({name:e,type:t.Command,payload:s,direction:n,module:o})}createQueryMessage(e,s,n=i.ToServer,o){return r.create({name:e,type:t.Query,payload:s,direction:n,module:o})}createEventMessage(e,s,n=i.ToServer,o){return r.create({name:e,type:t.Event,payload:s,direction:n,module:o})}sendCommand({name:e,payload:s,onSuccess:t,onError:i,module:r}){const n=this.createCommandMessage(e,s,void 0,r);return this.sendMessage(n,t,i),n}sendQuery({name:e,payload:s,onSuccess:t,onError:i,module:r}){const n=this.createQueryMessage(e,s,void 0,r);return this.sendMessage(n,t,i),n}sendEvent({name:e,payload:s,module:t}){const i=this.createEventMessage(e,s,void 0,t);return this.sendMessage(i),i}subscribeQuery(e){return this.sendQuery({name:e.name,payload:e.query,onSuccess:e.onUpdate,onError:e.onError,module:e.module}),this.subscriptionQuery.push(e),()=>{const s=this.subscriptionQuery.findIndex(s=>s===e);s>0&&this.subscriptionQuery.splice(s,1)}}onError(e){this.bridgeErrors.push(e)}handleIncomingMessage(e){this.history.push(e),this.subscriptionTrackIdList[e.trackId]&&(e.type===t.Error?this.subscriptionTrackIdList[e.trackId].onError?.(e.payload,e):this.subscriptionTrackIdList[e.trackId].onSuccess?.(e.payload,e),delete this.subscriptionTrackIdList[e.trackId]),e.type===t.Event&&this.receiveEventMessage(e)}receiveEventMessage(e){this.subscriptionEventList[e.name]&&this.subscriptionEventList[e.name].forEach(s=>s(e.payload,e)),this.subscriptionQuery.filter(s=>s.triggers?.some(s=>s===e.name)??!1).forEach(e=>{const s=this.createQueryMessage(e.name,e.query);this.sendMessage(s,e.onUpdate,e.onError)})}}class o extends n{connect(s={}){return this.connection=(new e.HubConnectionBuilder).withUrl(this.wsUri,s).withAutomaticReconnect().build(),this.connection.on("ReceiveMessage",e=>{this.onMessage(e)}),this.connection.start().then(()=>{this.connected=!0}).catch(e=>{this.onError(e)})}sendNetworkMessage(e){const s=JSON.stringify(e);this.connection?.invoke("SendMessage",s).catch(e=>(this.onError(e),console.error(e.toString())))}}class a extends n{constructor(...e){super(...e),this.socket=void 0,this.connectedCallback=void 0}connect(){return this.socket=new WebSocket(this.wsUri),this.socket.addEventListener("message",e=>{this.onMessage(e.data)}),new Promise((e,s)=>{this.socket?.addEventListener("open",s=>{this.connected=!0,e()})})}sendNetworkMessage(e){const s=JSON.stringify(e);this.socket?.send(s)}}export{r as Message,o as MessageBridgeService,n as MessageBridgeServiceBase,i as MessageDirection,t as MessageType,a as WebsocketMessageBridgeService};
//# sourceMappingURL=index.module.js.map
