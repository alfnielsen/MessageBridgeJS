import{HubConnectionBuilder as e}from"@microsoft/signalr";import{v4 as s}from"uuid";var t,r;function o(e,s=r.ToClient){return e.isError=e.type===t.Error,e.direction??=s,e}function n(e){return{name:e.name,payload:e.payload,type:e.type,direction:e.direction??r.ToClient,trackId:e.trackId??s(),module:e.module,schema:e.schema,created:(new Date).toISOString(),isError:e.type===t.Error}}function i(e){return n({...e,type:t.Command})}function a(e){return n({...e,type:t.Query})}function c(e){return n({...e,type:t.Event,payload:void 0})}!function(e){e.Command="Command",e.CommandResponse="CommandResponse",e.Query="Query",e.QueryResponse="QueryResponse",e.Event="Event",e.Error="Error"}(t||(t={})),function(e){e.ToClient="ToClient",e.ToServer="ToServer"}(r||(r={}));class d{constructor(e){this.wsUri=void 0,this.connected=!1,this.subscribedTrackIdMap={},this.subscribedEventListMap={},this.history=[],this.bridgeErrors=[],this.options={timeout:void 0,keepHistoryForReceivedMessages:!1,keepHistoryForSendingMessages:!1,logger:()=>console?.log??(()=>{}),logParseIncomingMessageError:!0,timeoutFromBridgeOptionsMessage:e=>`Timeout after ${e}ms (BridgeOptions.timeout)`,timeoutFromRequestOptionsMessage:e=>`Timeout after ${e}ms (RequestOptions.timeout)`,logParseIncomingMessageErrorFormat:e=>["Bridge-Error (parse messageReceived):",e],logMessageReceived:!1,logMessageReceivedFormat:e=>["Bridge (messageReceived):",e],logSendingMessage:!1,logSendingMessageFormat:e=>["Bridge (sendingMessage):",e]},this.wsUri=e}setOptions(e){this.options={...this.options,...e}}getTrackedRequestMessage(e){return this.subscribedTrackIdMap[e]?.requestMessage}onConnect(){this.connected=!0,this.options.onConnect?.()}onError(e,s){void 0!==e&&this.bridgeErrors.push(e),this.options.onError?.(e,s)}onClose(e,s){void 0!==e&&this.bridgeErrors.push(e),this.connected=!1,this.options.onClose?.(e,s)}setOptionalRequestTimeout({requestMessage:e,timeout:s,onTimeout:t}){let r,o;if(void 0!==this.options.timeout&&(r=this.options.timeoutFromBridgeOptionsMessage?.(this.options.timeout)??`timeout after ${this.options.timeout}`,o=this.options.timeout),void 0!==s&&(r=this.options.timeoutFromRequestOptionsMessage?.(s)??`timeout after ${s}`,o=s),void 0!==o)return setTimeout(()=>{t({reason:r,responseMessage:void 0,request:e.payload,requestMessage:e})},o)}sendMessageTracked(e){return new Promise((s,t)=>{this.sendMessagePromiseHandler({...e,handleResponseReject:(e,r)=>{e&&this.options.throwOnTrackedError?t(r):s(r)}})}).finally(()=>{delete this.subscribedTrackIdMap[e.requestMessage.trackId]})}sendMessage(e){return new Promise((s,t)=>{this.sendMessagePromiseHandler({...e,handleResponseReject:(e,r,o)=>{e?this.options.avoidThrowOnNonTrackedError?s(o?.payload):t(r):s(r.response)}})})}sendMessagePromiseHandler({handleResponseReject:e,requestMessage:s,onSuccess:t,onError:o,timeout:n}){s.direction=r.ToServer,this.options.interceptSendMessage&&(s=this.options.interceptSendMessage(s));const i=t=>{a&&clearTimeout(a);const r={response:void 0,responseMessage:void 0,request:s.payload,requestMessage:s,isError:!0,error:t.reason,errorMessage:t.responseMessage};this.onError(r),o?.(r),e(!0,r,t)},a=this.setOptionalRequestTimeout({requestMessage:s,timeout:n,onTimeout:e=>{i(e)}});this.subscribedTrackIdMap[s.trackId]={successTrack:r=>{const o={response:r.payload,responseMessage:r,request:s.payload,requestMessage:s,isError:!1};a&&clearTimeout(a),t?.(o),e(!1,o,void 0)},errorTrack:e=>{i({reason:e?.payload,responseMessage:e,request:s.payload,requestMessage:s})},requestMessage:s},this.internalSendMessage(s)}subscribeEvent({name:e,onEvent:s}){if(Array.isArray(e)){const t=e.map(e=>this.subscribeEvent({name:e,onEvent:s}));return()=>t.forEach(e=>e())}return this.subscribedEventListMap[e]||(this.subscribedEventListMap[e]=[]),this.subscribedEventListMap[e].push(s),()=>{const t=this.subscribedEventListMap[e].findIndex(e=>e===s);this.subscribedEventListMap[e].splice(t,1)}}sendCommand(e){const s=i(e);return this.sendMessage({requestMessage:s,onSuccess:e.onSuccess,onError:e.onError,timeout:e.timeout})}sendCommandTracked(e){const s=i(e);return this.sendMessageTracked({requestMessage:s,onSuccess:e.onSuccess,onError:e.onError,timeout:e.timeout})}sendQuery(e){const s=a(e);return this.sendMessage({requestMessage:s,onSuccess:e.onSuccess,onError:e.onError,timeout:e.timeout})}sendQueryTracked(e){const s=a(e);return this.sendMessageTracked({requestMessage:s,onSuccess:e.onSuccess,onError:e.onError,timeout:e.timeout})}sendEvent(e){let s=c(e);return s.direction=r.ToServer,this.options.interceptSendMessage&&(s=this.options.interceptSendMessage(s)),this.internalSendMessage(s),s}onMessage(e){let s;try{s="string"==typeof e?JSON.parse(e):e}catch(e){return void this.onError(e)}try{let e=o(s);this.options.interceptReceivedMessage&&(e=this.options.interceptReceivedMessage(e)),this.handleIncomingMessage(e)}catch(e){if(this.onError(e),this.options?.logger&&this.options?.logParseIncomingMessageError){const t=this.options?.logParseIncomingMessageErrorFormat?.(s)??[e];this.options.logger(t)}}}internalSendMessage(e){if(this.options.keepHistoryForSendingMessages&&this.history.push(e),this.options?.logger&&this.options?.logSendingMessage){let s=!0;if(this.options?.logSendingMessageFilter&&(s=!!e.name.match(this.options?.logSendingMessageFilter)),s){const s=this.options?.logSendingMessageFormat?.(e)??[e];this.options.logger(...s)}}this.options.onSend?.(e),this.sendNetworkMessage(e)}handleIncomingMessage(e){if(this.options.keepHistoryForReceivedMessages&&this.history.push(e),this.options?.logger&&this.options?.logMessageReceived){let s=!0;if(this.options?.logMessageReceivedFilter&&(s=!!e.name.match(this.options?.logMessageReceivedFilter)),s){const s=this.options?.logMessageReceivedFormat?.(e)??[e];this.options.logger(...s)}}this.options.onMessage?.(e);let s=e.type!==t.Error;if(e.type===t.Event)return void this.receiveEventMessage(e);const r=this.subscribedTrackIdMap[e.trackId];r&&(e.type===t.Error?(r.errorTrack?.(e),s=!0):r.successTrack?.(e),delete this.subscribedTrackIdMap[e.trackId]),s||this.onError?.(e)}receiveEventMessage(e){this.subscribedEventListMap[e.name]&&this.subscribedEventListMap[e.name].forEach(s=>s(e.payload,e))}}class h extends d{constructor(...e){super(...e),this.connection=void 0}connect(s={}){if(this.connection=(new e).withUrl(this.wsUri,s).withAutomaticReconnect().build(),!this.connection)throw new Error("Failed to create SignalR connection");return this.connection.on("ReceiveMessage",e=>{this.onMessage(e)}),this.connection.onclose(e=>{this.onClose(e)}),this.connection.start().then(()=>{this.onConnect()}).catch(e=>{this.onError(e)})}close(){this.connection?.stop(),this.onClose()}sendNetworkMessage(e){const s=JSON.stringify(e);this.connection?.invoke("SendMessage",s).catch(e=>(this.onError(e),console.error(e.toString())))}}class g extends d{constructor(...e){super(...e),this.socket=void 0,this.connectedCallback=void 0}connect(){return this.socket=new WebSocket(this.wsUri),this.socket.addEventListener("message",e=>{this.onMessage(e.data)}),this.socket.addEventListener("close",e=>{this.onClose(e.reason,e)}),this.socket.addEventListener("error",e=>{this.onError(e,e)}),new Promise((e,s)=>{this.socket?.addEventListener("open",s=>{this.onConnect(),e()})})}close(){this.socket?.close(),this.onClose()}sendNetworkMessage(e){const s=JSON.stringify(e);this.socket?.send(s)}}class u extends d{constructor(...e){super(...e),this.server=void 0}setServer(e){this.server=e}connect(){if(!this.server)throw new Error("No server set");return this.server?.connect(e=>{this.onMessage(e),this.onConnect()}),Promise.resolve()}close(){this.onClose()}sendNetworkMessage(e){setTimeout(()=>{this.server?.onMessage(e)},10)}}class p{constructor(){this.store={},this.commands={},this.queries={},this.eventListeners={},this.sendMessage=void 0}saveToLocalStorage(e){localStorage.setItem(e,JSON.stringify(this.store))}loadFromLocalStorage(e){const s=localStorage.getItem(e);s&&(this.store=JSON.parse(s))}connect(e){this.sendMessage=e}sendError(e,s){const o=n({trackId:s,type:t.Error,name:"Error",payload:e,direction:r.ToClient});this.sendMessage?.(o)}sendResponse(e,s,t,o){const i=n({trackId:o,type:e,name:s,payload:t,direction:r.ToClient});this.sendMessage?.(i)}sendEvent(e,s){const o=n({type:t.Event,name:e,payload:s,direction:r.ToClient});this.sendMessage?.(o)}onMessage(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(s){return this.sendError({message:`Error parsing message: ${s}`,request:e,error:s,stack:s?.stack}),void console.error("Error parsing message",s)}if("Command"===e.type){if(!this.commands[e.name])return void this.sendError({message:`Command ${e.name} not found (Register it with addCommand)`,request:e},e.trackId);this.serverHandleCommand(e)}if("Query"===e.type){if(!this.queries[e.name])return void this.sendError({message:`Query ${e.name} not found (Register it with addQuery)`,request:e},e.trackId);this.serverHandleQuery(e)}if("Event"===e.type){if(!this.eventListeners[e.name])return void this.sendError({message:`Event ${e.name} not found (Register it with addEvent)`,request:e},e.trackId);this.serverHandleEvent(e)}}serverHandleCommand(e){const s=this.commands[e.name],r=s=>{this.sendResponse(t.CommandResponse,e.name,s,e.trackId)},o=s=>{this.sendError({message:s,request:e},e.trackId)},n=(e,s)=>{this.sendEvent(e,s)};try{s({requestMessage:e,request:e.payload,store:this.store,error:o,event:n,response:r})}catch(s){o({message:`Error in command handler for '${e.name}'`,requestMessage:e,error:s,stack:s?.stack})}}serverHandleQuery(e){(0,this.queries[e.name])({requestMessage:e,request:e.payload,store:this.store,error:s=>{this.sendError({message:s,request:e},e.trackId)},event:(e,s)=>{this.sendEvent(e,s)},response:s=>{this.sendResponse(t.QueryResponse,e.name,s,e.trackId)}})}serverHandleEvent(e){(0,this.eventListeners[e.name])({requestMessage:e,request:e.payload,store:this.store,error:s=>{this.sendError({message:s,request:e},e.trackId)},event:(e,s)=>{this.sendEvent(e,s)}})}addCommand(e,s){this.commands[e]=s}addQuery(e,s){this.queries[e]=s}addEventListener(e,s){this.eventListeners[e]=s}}export{u as ClientSideMessageBridgeService,p as InMemoryClientSideServer,d as MessageBridgeServiceBase,r as MessageDirection,t as MessageType,h as SignalRMessageBridgeService,g as WebsocketMessageBridgeService,i as createCommandMessage,c as createEventMessage,n as createMessage,o as createMessageFromDto,a as createQueryMessage};
//# sourceMappingURL=index.module.js.map
